{
    "project": {
        "logo": "logo.png",
        "name": "ThreePx",
        "description": "The size of this plane doesn't change when the html wrapper changes it's size.",
        "version": "0.1.1"
    },
    "files": {
        "src\\threepx.js": {
            "name": "src\\threepx.js",
            "modules": {},
            "classes": {
                "THREEPX": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "THREEPX": {
            "name": "THREEPX",
            "shortname": "THREEPX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\threepx.js",
            "line": 45,
            "description": "ThreePx synchronises the [three.js](href=\"http://threejs.org/\")\nfrustrum with that of the CSS.<br>\nSee working examples in the examples folder.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "wrapper",
                    "description": "The `THREEPX.renderer.domElement`\n   will be added at position 0 of the wrapper.",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "The default options are:\n * __configurable:__ `false`<br>\n   Enable this option to override if you want override the API.\n * __autoInitializeThreejs:__ `true`<br>\n   Enable or disable the creation of the scene, the renderer\n   and the camera on the new ThreePx instance.\n * __autoResize:__ `true`<br>\n   Enable or disable the bind between the wrapper size and\n   the `THREEPX.renderer.domElement`.\n * __debug:__ `false`<br>\n   Enable or disable some three.js elements added to the scene to debug.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n      var wrapperElement = document.getElementById('wrapper'),\n          threepx = new THREEPX(wrapperElement),\n          mesh = new THREE.Mesh(\n              // define your mesh\n          )\n      ;\n\n      threepx.scene.add(mesh);\n\n      var lastTimestamp = new Date();\n\n      threepx.renderFunction  = function (timestamp, width, height) {\n\n          var delta = timestamp - lastTimestamp,\n              angle = 0.02 * delta * 2 * Math.PI / 1000\n          ;\n\n          mesh.rotation.x += angle;\n          mesh.rotation.y += angle;\n\n          mesh.position.set(100 + width/2, 100 - height/2, 0);\n\n          lastTimestamp = timestamp;\n\n          return true;\n      }"
            ]
        }
    },
    "classitems": [
        {
            "file": "src\\threepx.js",
            "line": 359,
            "description": "The version of ThreePx.",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 371,
            "description": "The field of view given for the perspective property.",
            "itemtype": "property",
            "name": "fov",
            "type": "{Float}",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 383,
            "description": "The perspective parse from the wrapper CSS.",
            "itemtype": "property",
            "name": "perspective",
            "type": "{Float}",
            "default": "2000 if CSS perspective is not defined for the wrapper.",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 396,
            "description": "Set to true if the view changed during the frame.",
            "itemtype": "property",
            "name": "viewChanged",
            "type": "{Bollean}",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 408,
            "description": "Enable or disable the rendering.",
            "itemtype": "property",
            "name": "enable",
            "type": "{Boolean}",
            "default": "true",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 429,
            "description": "If autoResize is set to true,\nthe size of the `THREEPX.renderer.domElement` is bind\nto the wrapper size.\n\n*This property can be set in the options passed to the constructor.*",
            "itemtype": "property",
            "name": "autoResize",
            "type": "{Bollean}",
            "default": "true",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 450,
            "description": "An user function called at the end of the render process.\nThe function must return true to make the renderer render.",
            "example": [
                "\n    threepx.renderFunction = function (timestamp, width, height) {\n        cube.rotation.y += 0.01;\n        return true;\n    }"
            ],
            "itemtype": "property",
            "name": "renderFunction",
            "type": "{Function}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 472,
            "description": "The actual width of the `THREEPX.renderer.domElement`.<br>\nIf explicitWidth property is null or undefined,\nthe width is equal to the `THREEPX.wrapper.clientWidth`\nelse the width is equal to explicitWidth property.",
            "itemtype": "property",
            "name": "width",
            "type": "{Integer}",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 487,
            "description": "The actual height of the `THREEPX.renderer.domElement`.<br>\nIf explicitHeight property is null or undefined,\nthe width is equal to the `THREEPX.wrapper.clientHeight`\nelse the height is equal to explicitHeight property.",
            "itemtype": "property",
            "name": "height",
            "type": "{Integer}",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 502,
            "description": "If the explicit width is not null or not undefined,\nthe width is set tho the explicit width\nand the autoResize is not effective for the width.<br>\n\n*Update the value will generate a three.js render.*",
            "itemtype": "property",
            "name": "explicitWidth",
            "type": "{Integer}",
            "default": "undefined",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 530,
            "description": "If the explicit height is not null or not undefined,\nthe height is set tho the explicit height\nand the autoResize is not effective for the height.<br>\n\n*Update the value will generate a three.js render.*",
            "itemtype": "property",
            "name": "explicitHeight",
            "type": "{Integer}",
            "default": "undefined",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 558,
            "description": "Set to true if the wrapper changed during the frame.",
            "itemtype": "property",
            "name": "wrapperChanged",
            "type": "{Boolean}",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 570,
            "description": "The wrapper used by the instance of ThreePx.",
            "itemtype": "property",
            "name": "wrapper",
            "type": "{HTMLElement}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 593,
            "description": "A flag to know if the scene has changed during the frame.",
            "itemtype": "property",
            "name": "sceneChanged",
            "type": "{Boolean}",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 605,
            "description": "The three.js [scene](http://threejs.org/docs/#Reference/Scenes/Scene)\nused by the instance of ThreePx.\n\n*Camera will be automatically added to scene.*",
            "itemtype": "property",
            "name": "scene",
            "type": "{THREE.Scene}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 631,
            "description": "A flag to know if the renderer has changed during the frame.",
            "itemtype": "property",
            "name": "rendererChanged",
            "type": "{Boolean}",
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 643,
            "description": "The three.js [renderer](http://threejs.org/docs/#Reference/Renderers/WebGLRenderer)\nused by the instance of ThreePx.",
            "itemtype": "property",
            "name": "renderer",
            "type": "{THREE.WebGLRenderer}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 667,
            "description": "A flag to know if the camera has changed during the frame.",
            "itemtype": "property",
            "name": "cameraChanged",
            "readonly": "",
            "type": "{Boolean}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 679,
            "description": "The three.js [camera](http://threejs.org/docs/#Reference/Cameras/PerspectiveCamera)\nused by the instance of ThreePx.\n\n*Camera will be automatically added to scene.*",
            "itemtype": "property",
            "name": "camera",
            "type": "{THREE.PerspectiveCamera}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 705,
            "description": "A flag to know if translation or rotation have changed during this frame.",
            "itemtype": "property",
            "name": "transformChanged",
            "type": "{Boolean}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 716,
            "description": "Equivalent to CSS translate3d",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "Specifies the 3D translation in the x direction.",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "Specifies the 3D translation in the y direction.",
                    "type": "Float"
                },
                {
                    "name": "z",
                    "description": "Specifies the 3D translation in the z direction.",
                    "type": "Float"
                }
            ],
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 731,
            "description": "Specifies the 3D translation in the x direction",
            "itemtype": "property",
            "name": "translateX",
            "type": "{Float}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 755,
            "description": "Specifies the 3D translation in the y direction",
            "itemtype": "property",
            "name": "translateY",
            "type": "{Float}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 779,
            "description": "Specifies the 3D translation in the z direction",
            "itemtype": "property",
            "name": "translateZ",
            "type": "{Float}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 803,
            "description": "Equivalent to CSS rotate3d",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "x",
                    "description": "Specifies the 3D translation in the x direction.",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "Specifies the 3D translation in the y direction.",
                    "type": "Float"
                },
                {
                    "name": "z",
                    "description": "Specifies the 3D translation in the z direction.",
                    "type": "Float"
                }
            ],
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 818,
            "description": "Specifies the 3D translation in the x direction",
            "itemtype": "property",
            "name": "rotateX",
            "type": "{Float}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 842,
            "description": "Specifies the 3D translation in the y direction",
            "itemtype": "property",
            "name": "rotateY",
            "type": "{Float}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 866,
            "description": "Specifies the 3D rotation in the z direction",
            "itemtype": "property",
            "name": "rotateZ",
            "type": "{Float}",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 1349,
            "description": "The version of ThreePx.",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "static": 1,
            "readonly": "",
            "class": "THREEPX"
        },
        {
            "file": "src\\threepx.js",
            "line": 1362,
            "description": "ThreePx need WebGL and requestAnimationFrame() to be used.\nIf these requirements are not satisfied canBeUsed property is set to false.",
            "itemtype": "property",
            "name": "canBeUsed",
            "type": "{Boolean}",
            "static": 1,
            "readonly": "",
            "class": "THREEPX"
        }
    ],
    "warnings": []
}